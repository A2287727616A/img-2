Node.js 公共图床代码生成提示词 (v24 - MySQL密码更新)项目名称： 蔚蓝档案风格公共图床 - Memory Echoes项目概述：请生成一个 Node.js 应用程序，作为公共图床服务，域名为 img.memory-echoes.cn，默认运行端口为 1190。该服务允许用户上传图片，图片将被存储 72 小时后自动删除。系统需提供用户注册、登录、邮箱验证、密码重置、邮箱更换、账户删除、双因素认证 (2FA)、用户图片举报、登录设备管理、图片隐私设置、图片收藏夹/相册、API密钥管理及上传API、可选图片水印、图片自动优化、管理员账户封禁/解禁、用户组管理、管理员添加及全局公告管理功能，并为通过邮箱验证的用户提供更大的单文件上传限制。所有关键操作（注册、登录、上传、密码重置、邮箱更换请求、账户删除请求、2FA设置、API密钥操作）均需集成 Cloudflare Turnstile 进行人机验证。系统应包含必要的风险控制措施（包括IP核验、针对异地/新设备登录的强制邮件验证码及验证界面、多地址登录检测、自动封禁系统）和邮件提醒功能。前端用户界面和管理员后台界面均应高度现代化、美观、功能齐全，包含丰富的细节处理和流畅的动画效果，并统一采用“蔚蓝档案”游戏的设计风格，注重快速响应和加载速度。当服务器发生未捕获的错误时，应记录到日志文件，并向用户展示一个唯一的事件ID。同时，集成 Artalk 评论组件，并提供 FAQ、更新日志及关于我们页面。项目最终应包含所有必要的源代码文件（包括前端HTML, CSS, 客户端JavaScript）以及用于 Docker Compose 部署 的配置文件。安全性与性能是本项目的最高优先级。核心功能：用户认证系统 (基于 MySQL):数据库配置:类型: MySQL版本: 8.x (兼容 8.4.4)连接地址: 154.9.253.115 (在 Docker Compose 环境中，应配置为服务名，例如 mysql_db)端口: 3306数据库名: img-72hours用户名: img-72hours密码: 7haMSr3aDTTDcWY4数据表设计 (请在代码中包含创建表的SQL语句或使用ORM自动同步):users: id (INT, PK, AI), email (VARCHAR, UNIQUE, NOT NULL), password_hash (VARCHAR, NOT NULL), role (ENUM('user', 'admin', 'super_admin') DEFAULT 'user'), is_verified (BOOLEAN, DEFAULT FALSE), verification_token (VARCHAR, NULLABLE), verification_token_expires_at (DATETIME, NULLABLE), reset_password_token (VARCHAR, UNIQUE, NULLABLE), reset_password_token_expires_at (DATETIME, NULLABLE), login_otp_token (VARCHAR, NULLABLE), login_otp_token_expires_at (DATETIME, NULLABLE), pending_email (VARCHAR, NULLABLE), email_change_token (VARCHAR, UNIQUE, NULLABLE), email_change_token_expires_at (DATETIME, NULLABLE), email_change_freeze_until (DATETIME, NULLABLE), two_factor_secret (VARCHAR, NULLABLE, 加密存储), two_factor_enabled (BOOLEAN, DEFAULT FALSE), two_factor_recovery_codes (JSON or TEXT, NULLABLE, 加密存储，存储多个一次性恢复码的哈希值), failed_login_attempts (TINYINT, DEFAULT 0), last_failed_login_at (DATETIME, NULLABLE), account_locked_until (DATETIME, NULLABLE), account_deletion_requested_at (DATETIME, NULLABLE), account_deletion_confirmation_token (VARCHAR, UNIQUE, NULLABLE), account_deletion_token_expires_at (DATETIME, NULLABLE), is_banned (BOOLEAN, DEFAULT FALSE), ban_reason (TEXT, NULLABLE), banned_at (DATETIME, NULLABLE), auto_banned_at (DATETIME, NULLABLE), auto_ban_reason (TEXT, NULLABLE), unban_request_token (VARCHAR, UNIQUE, NULLABLE), unban_request_token_expires_at (DATETIME, NULLABLE), default_image_privacy (ENUM('public', 'unlisted', 'private') DEFAULT 'public'), default_watermark_id (INT, FK to watermarks.id, NULLABLE), created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), updated_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)。user_ips: id (INT, PK, AI), user_id (INT, FK to users.id), ip_address (VARCHAR, NOT NULL), user_agent (TEXT, NULLABLE), device_name (VARCHAR(255), NULLABLE) (例如 "Chrome on Windows 10", "Safari on iPhone"), last_login_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), is_known_device (BOOLEAN, DEFAULT FALSE), session_id (VARCHAR, UNIQUE, NOT NULL) (用于追踪活动会话), is_active_session (BOOLEAN, DEFAULT TRUE), last_activity_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP).images: id (INT, PK, AI), user_id (INT, FK to users.id, NULLABLE - 允许匿名上传), s3_object_key (VARCHAR, UNIQUE, NOT NULL), original_filename (VARCHAR), mime_type (VARCHAR), size_bytes (BIGINT), upload_ip (VARCHAR), public_url (VARCHAR, NOT NULL), privacy_level (ENUM('public', 'unlisted', 'private') DEFAULT 'public'), applied_watermark_id (INT, FK to watermarks.id, NULLABLE), uploaded_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), expires_at (DATETIME, NOT NULL, 计算为 uploaded_at + 72 hours)。stats_counters: counter_name (VARCHAR, PK, e.g., 'total_uploaded_images'), counter_value (BIGINT, DEFAULT 0).audit_logs: id (BIGINT, PK, AI), timestamp (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), actor_user_id (INT, FK to users.id, NULLABLE), actor_ip (VARCHAR, NULLABLE), action_type (VARCHAR, NOT NULL, e.g., 'USER_LOGIN', 'ADMIN_BAN_USER', 'AUTO_BAN_USER', 'IMAGE_UPLOAD', 'SYSTEM_ERROR', 'ADMIN_LOGIN', 'ADMIN_ADD_USER_TO_GROUP', '2FA_SETUP', '2FA_LOGIN', 'IMAGE_REPORTED', 'ANNOUNCEMENT_CREATED', 'ANNOUNCEMENT_UPDATED', 'ANNOUNCEMENT_DELETED', 'SESSION_REVOKED', 'LOGIN_OTP_VERIFIED', 'API_KEY_CREATED', 'API_KEY_DELETED', 'IMAGE_PRIVACY_UPDATED', 'WATERMARK_APPLIED', 'COLLECTION_CREATED', 'COLLECTION_UPDATED', 'COLLECTION_DELETED', 'IMAGE_ADDED_TO_COLLECTION', 'IMAGE_REMOVED_FROM_COLLECTION'), target_user_id (INT, FK to users.id, NULLABLE), target_resource_id (VARCHAR, NULLABLE, e.g., image_id, announcement_id, session_id, api_key_id, collection_id), details (JSON or TEXT, NULLABLE) (存储操作相关的具体信息).image_reports: id (INT, PK, AI), image_id (INT, FK to images.id, ON DELETE CASCADE), reporter_user_id (INT, FK to users.id, NULLABLE, ON DELETE SET NULL), reporter_ip (VARCHAR, NULLABLE), report_reason (ENUM('copyright', 'illegal_content', 'spam', 'nsfw', 'other') NOT NULL), report_notes (TEXT, NULLABLE), status (ENUM('pending_review', 'resolved_no_action', 'resolved_image_deleted', 'resolved_user_warned', 'resolved_user_banned') DEFAULT 'pending_review'), reported_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), reviewed_by_admin_id (INT, FK to users.id, NULLABLE), reviewed_at (DATETIME, NULLABLE).announcements: id (INT, PK, AI), title (VARCHAR(255), NOT NULL), content (TEXT, NOT NULL), level (ENUM('info', 'warning', 'critical') DEFAULT 'info'), is_active (BOOLEAN, DEFAULT TRUE), show_to_logged_in_users_only (BOOLEAN, DEFAULT FALSE), show_to_admin_only (BOOLEAN, DEFAULT FALSE), created_by_admin_id (INT, FK to users.id), created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), updated_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP).api_keys: id (INT, PK, AI), user_id (INT, FK to users.id, ON DELETE CASCADE), key_name (VARCHAR(100), NOT NULL), api_key_hash (VARCHAR(255), UNIQUE, NOT NULL), last_used_at (DATETIME, NULLABLE), created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), expires_at (DATETIME, NULLABLE).watermarks: id (INT, PK, AI), user_id (INT, FK to users.id, NULLABLE, ON DELETE CASCADE), name (VARCHAR(100), NOT NULL), type (ENUM('text', 'image') NOT NULL), text_content (VARCHAR(255), NULLABLE), text_font (VARCHAR(100), NULLABLE), text_size (INT, NULLABLE), text_color (VARCHAR(7), NULLABLE, e.g., '#RRGGBB'), image_s3_key (VARCHAR(255), NULLABLE), position (ENUM('top_left', 'top_right', 'bottom_left', 'bottom_right', 'center', 'tile') DEFAULT 'bottom_right'), opacity (FLOAT, DEFAULT 1.0, min 0, max 1), is_global (BOOLEAN, DEFAULT FALSE), created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP). (Global watermarks have NULL user_id).collections: id (INT, PK, AI), user_id (INT, FK to users.id, ON DELETE CASCADE), name (VARCHAR(100), NOT NULL), description (TEXT, NULLABLE), privacy_level (ENUM('public', 'unlisted', 'private') DEFAULT 'private'), created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), updated_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP).collection_images: id (INT, PK, AI), collection_id (INT, FK to collections.id, ON DELETE CASCADE), image_id (INT, FK to images.id, ON DELETE CASCADE), added_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP), UNIQUE (collection_id, image_id).默认管理员账户:系统初始化时（或通过一个安全的设置脚本）应创建一个默认的超级管理员 (super_admin) 账户。邮箱: 327527865@qq.com默认密码: @admin123456 (在存入数据库前必须进行哈希处理)。全局邮件验证码规则:所有发送给用户的邮件验证码（用于邮箱验证、登录二次验证、密码重置、邮箱更换、账户删除确认等）应为随机生成的 8到15位字母与数字的组合。验证码应具有时效性（例如10-15分钟）。注册:需要邮箱、密码。密码策略：最小长度（如8位），包含大小写字母、数字、特殊字符中的至少三种。密码需进行哈希存储 (e.g., bcrypt)。必须进行邮箱地址验证： 注册前进行 Cloudflare Turnstile 验证。成功提交注册信息后，生成邮箱验证令牌，发送验证邮件。用户需点击邮件中的链接或输入验证码完成账户激活。未验证邮箱的账户功能受限。邮箱验证 (账户激活):邮箱配置:SMTP 服务器地址: smtp.qiye.aliyun.com端口: 465 (使用 SSL)邮箱用户名: noreply.asg@dev.class3.fun邮箱密码: 5jrvjfj3InylVqjK发件人名称: Memory-Echones Img验证邮件包含一个指向 https://img.memory-echoes.cn/verify-email?token={verification_token} 的链接或一个验证码。用户点击链接或输入验证码后，验证令牌/验证码有效性，将用户标记为已验证 (is_verified = TRUE)。登录:需要邮箱、密码。登录前进行 Cloudflare Turnstile 验证。账户封禁检查: 如果用户账户 is_banned = TRUE 或 auto_banned_at IS NOT NULL，则阻止登录。若为管理员手动封禁 (is_banned = TRUE)，显示：“您的账户已被暂停。原因：[ban_reason]。如有疑问，请联系管理员。”若为系统自动封禁 (auto_banned_at IS NOT NULL)，显示：“您的账户因违反安全策略已被系统自动暂停。原因：[auto_ban_reason]。您可以尝试通过邮件申请解封，或联系管理员。”并提供“申请邮件解封”的选项。密码验证通过后，执行异地/新设备登录检测：如果判定为高风险登录（基于IP核验和设备指纹），则不立即完成登录，而是将用户重定向到一个专门的邮件OTP验证界面 (例如 /login/verify-otp)。该界面应设计美观，符合整体风格，并清晰指示用户输入邮件验证码。系统向用户注册邮箱发送一个一次性登录验证码 (login_otp_token)。用户在该界面输入收到的OTP。OTP验证成功后，才完成登录流程。OTP验证失败达到阈值应有相应处理（如临时锁定OTP输入）。双因素认证 (2FA) 检查 (在邮件OTP之后或作为并行/可选的更高安全级别): 如果用户已启用2FA (two_factor_enabled = TRUE)，在密码验证和（如果触发）邮件OTP验证通过后，再要求输入TOTP验证码。账户删除冷静期登录处理:如果用户账户已标记为待删除 (account_deletion_requested_at 已设置且 account_deletion_token_expires_at 未到期)，在成功登录（包括所有二次验证）后，立即向用户显示一个醒目的提示：“您的账户已计划于 [account_deletion_token_expires_at] 删除。您希望取消删除操作吗？” 并提供“取消删除”和“继续并登出”的选项。若选择“取消删除”：清除 account_deletion_requested_at, account_deletion_confirmation_token, account_deletion_token_expires_at 字段。邮件提醒: 通知用户账户删除已取消。用户正常进入仪表盘。若选择“继续并登出”或尝试访问其他页面，则将用户登出，删除流程继续。成功登录（完成所有必要的验证步骤，且未处于删除冷静期或已取消删除，且账户未被封禁）后创建 session 或发放 JWT，并将 session_id 记录到 user_ips。记录登录IP和User-Agent到 user_ips 表，并标记为已知设备/IP，同时记录设备名称。密码重置:用户在登录页面提供邮箱地址，请求密码重置。系统验证邮箱是否存在且已验证。生成唯一的、有时效性（例如1小时）的密码重置令牌 (reset_password_token)，存储到 users 表。邮件提醒: 发送包含重置链接 (https://img.memory-echoes.cn/reset-password?token={reset_password_token}) 或验证码的邮件给用户。用户通过链接访问重置页面或直接输入验证码，然后输入新密码（需符合密码策略）并确认。系统验证令牌/验证码有效性，更新用户密码哈希，并使重置令牌失效。邮件提醒: 发送密码已成功重置的通知邮件给用户。邮箱地址更换:用户在个人设置页面发起邮箱更换请求。旧邮箱地址验证: 要求用户输入当前密码，并通过发送到当前（旧）邮箱的验证码进行身份验证。用户输入新的邮箱地址。系统检查新邮箱是否已被其他用户注册。新邮箱地址验证: 生成唯一的、有时效性的邮箱更换令牌 (email_change_token)，将新邮箱地址存入 pending_email，并将令牌发送到新的邮箱地址。用户点击新邮件中的验证链接或输入验证码。冻结与最终确认: 新邮箱验证通过后，系统记录 email_change_freeze_until (当前时间 + 168小时)。在此168小时冻结期内，账户部分功能可能受限（例如，不能再次修改邮箱、不能删除账户）。旧邮箱仍会收到重要安全通知。冻结期结束后，pending_email 正式替换 email 字段，pending_email 和相关令牌清空。邮件提醒:向旧邮箱发送“邮箱更换请求已发起，并等待新邮箱验证”的通知。向旧邮箱发送“您的账户关联邮箱已成功验证新邮箱地址，将在168小时后正式更改”的通知。在168小时冻结期结束后，向新旧两个邮箱地址发送“您的账户邮箱已成功更改为[新邮箱]”的最终确认通知。账户删除:用户在个人设置页面发起账户删除请求。身份验证: 要求用户输入当前密码进行确认。进行 Cloudflare Turnstile 验证。邮件确认删除请求: 生成唯一的、有时效性（例如24小时）的账户删除确认令牌 (account_deletion_confirmation_token)，发送包含确认链接 (https://img.memory-echoes.cn/confirm-delete-account?token={account_deletion_confirmation_token}) 或验证码的邮件到用户已验证的邮箱。用户点击链接或输入验证码确认删除意愿。启动72小时冷静期: 确认后，设置 account_deletion_requested_at 为当前时间，account_deletion_token_expires_at 为当前时间 + 72小时。邮件提醒: 通知用户其账户删除请求已被确认，账户将在72小时后永久删除，在此期间登录可取消删除。冷静期后自动删除: 一个后台任务 (e.g., node-cron) 定期检查 users 表中 account_deletion_token_expires_at 已到期且 account_deletion_requested_at 仍然设置的账户。数据清除:从S3中删除该用户上传的所有图片。从 images 表中删除该用户的所有图片记录。从 user_ips 表中删除该用户的所有IP记录。邮件提醒 (最终删除前): 在执行数据库删除前，向用户邮箱发送最终通知：“您的账户及所有相关数据即将被永久删除。”从 users 表中删除该用户记录。双因素认证 (2FA - TOTP):启用流程 (用户设置页面):用户请求启用2FA。系统为该用户生成一个唯一的 two_factor_secret (使用如 speakeasy 库)。向用户显示此密钥的二维码 (QR Code, e.g., using qrcode library) 和文本形式的密钥，供用户添加到认证器应用 (如 Google Authenticator, Authy)。要求用户输入认证器应用生成的当前TOTP码进行验证。验证通过后，设置 two_factor_enabled = TRUE，并加密存储 two_factor_secret。生成并显示一组一次性恢复码 (two_factor_recovery_codes)，用户必须安全保存这些恢复码。恢复码应哈希后存储。邮件提醒: 通知用户2FA已成功启用。禁用流程 (用户设置页面):用户请求禁用2FA。要求输入当前密码和当前TOTP码进行验证。验证通过后，设置 two_factor_enabled = FALSE，并清除 two_factor_secret 和 two_factor_recovery_codes。邮件提醒: 通知用户2FA已禁用。恢复码使用: 如果用户无法访问认证器应用，可以在登录时选择使用恢复码。每个恢复码只能使用一次。管理员重置2FA (管理员后台): 如果用户丢失设备和恢复码，管理员（super_admin）应能为用户重置/禁用2FA（此操作需严格记录到审计日志）。Cloudflare Turnstile 集成:站点密钥 (Site Key): 0x4AAAAAABc8GGu7mmyWjrkV秘密密钥 (Secret Key): 0x4AAAAAABc8GNH2e8EYjXXxb0bB0vKIMbs应用于注册、登录、密码重置请求、邮箱更换请求、账户删除请求、2FA设置/禁用请求、图片上传（包括匿名和已登录用户）操作。图片上传与处理：上传限制:已验证邮箱的注册用户: 单文件上传限制为 128MB。匿名用户或未验证邮箱的注册用户: 单文件上传限制为 30MB。在主页或上传界面清晰提示不同用户的上传限制。支持用户通过网页界面上传图片（应支持拖拽上传和点击选择文件方式）。后端接收图片，进行严格的安全检查（包括但不限于文件类型、内容嗅探以确认是否为真实图片、文件大小）。图片自动优化:在图片上传后、存储到S3之前，系统应自动对图片进行优化处理。优化选项 (可由管理员在后台配置，用户上传时可选或使用默认):JPEG/PNG压缩: 使用如 sharp 库的 jpeg({quality: X}) 或 png({quality: Y, compressionLevel: Z})。WebP转换: 可选将图片转换为WebP格式以进一步减小体积，同时保留原格式作为备选或根据浏览器兼容性提供。元数据移除: 可选移除图片的EXIF等元数据以保护隐私和减小体积。优化后的图片存储到S3。可选图片水印:已登录用户可在其用户设置中选择默认启用的水印（从其个人创建的或管理员创建的全局水印中选择）。上传时，用户可以覆盖默认设置，选择应用特定水印或不应用水印。水印处理应在图片上传到S3之前完成，通常在图片优化之后。可以使用如 sharp 库进行图片处理。水印信息（applied_watermark_id）记录在 images 表。图片存储 (雨云 S3):使用第三方对象存储服务：雨云 (rainyun.com) 的 S3 兼容服务。API 端点 (Endpoint): https://cn-nb1.rains3.comAccess Key ID: PtEfTT0LtNiVPgBhSecret Access Key: qwzQl9XvjQGbdCjKLQJYpOVwAZMjqM图片在对象存储中保存精确到 72 小时，之后应被自动删除。首选方案： 通过 AWS S3 SDK (或兼容的 S3 SDK，如 aws-sdk for Node.js) 配置存储桶的生命周期规则 (Lifecycle Configuration) 来自动删除过期对象。请在代码中展示如何通过SDK设置或确认此类规则的应用（例如，提供一个可运行的配置脚本或在服务启动时检查并配置）。如果无法通过SDK直接配置，请在 README.md 中详细说明手动配置步骤及如何验证其有效性。备选方案（若S3生命周期规则无法通过API直接配置或不适用）： 应用层面实现删除。这需要记录每张图片的上传时间戳和其在S3中的对象键（建议存储在数据库中）。一个后台任务 (e.g., 使用 node-cron 或 agenda) 应定期运行（例如，每小时一次），查询记录中超过72小时的图片，并从S3中删除它们。同时，相关的元数据记录也应被清理或标记为已删除。图片访问与管理：成功上传后，向用户清晰显示图片的完整、可直接访问的公共 URL (基于 https://img.memory-echoes.cn/i/{unique_image_id} 格式，其中 unique_image_id 可以是数据库中图片的自增ID或一个短UUID，以提供更友好的URL)。提供一键复制URL的功能。用户图片历史记录:已登录用户: 在用户主页显示其上传的所有未过期图片列表（应支持分页显示），包含图片缩略图、文件名、上传时间、剩余有效期、访问URL、当前隐私设置。匿名用户: 允许通过浏览器 localStorage 或 sessionStorage 查看当前会话期间上传的图片列表及其URL（例如最近20张）。历史记录应在用户清除浏览器数据或会话结束后自然失效/清除。用户图片举报:在图片查看页面，提供一个“举报此图片”的按钮/链接。点击后，弹出一个表单，允许用户选择举报原因 (来自image_reports.report_reason的ENUM值) 并填写可选的备注。提交举报后，记录到 image_reports 表，状态为 pending_review。邮件提醒 (管理员): 可选，当有新举报时通知管理员。网页提示 (用户): “您的举报已提交，感谢您的反馈。”图片隐私设置 (仅限已登录用户对其上传的图片):用户可在其图片管理界面更改单张图片的隐私级别 (images.privacy_level)。可选级别：public (公开访问), unlisted (知道链接才能访问，不出现在公共列表或搜索中), private (仅上传者自己可见)。访问控制逻辑需在后端严格执行。图片收藏夹/相册 (Image Collections/Albums):创建/编辑/删除收藏夹: 已登录用户可以在其仪表盘中创建新的收藏夹（需提供名称、可选描述、隐私级别）。用户可以编辑收藏夹的名称、描述和隐私级别，也可以删除收藏夹（删除收藏夹不删除其中的图片，仅解除关联）。添加/移除图片到收藏夹: 用户在浏览自己的图片时，可以将图片添加到一个或多个已创建的收藏夹中。也可以从收藏夹中移除图片。浏览收藏夹: 用户可以查看自己的收藏夹列表，并点击进入特定收藏夹查看其中的图片。收藏夹隐私: 收藏夹的隐私级别 (collections.privacy_level) 决定了谁可以看到该收藏夹及其内容（public - 所有人，unlisted - 知道链接的人，private - 仅创建者）。如果收藏夹是公开的，其包含的图片也必须是公开的才能被他人看到。用户主页与信息显示 (已登录用户):路径例如: https://img.memory-echoes.cn/dashboard显示用户信息：邮箱（部分打码）、账户状态（已验证/未验证/待删除/已封禁及原因）、当前上传限额。管理其上传的图片（查看、复制链接、手动删除自己的图片、修改图片隐私设置、添加到收藏夹）。管理图片收藏夹/相册。修改密码、请求重新发送验证邮件等功能。2FA 设置/管理入口。邮箱更换入口。账户删除请求入口。登录设备管理 (Login Device Management):界面: 提供一个专门的页面或区域，列出用户当前和最近的活动会话。显示信息: 每个会话条目应显示设备名称/类型 (从 user_ips.device_name 或通过解析User-Agent粗略识别)、IP地址、大致地理位置 (通过IP地理位置库)、首次登录时间、最近活动时间 (user_ips.last_activity_at)。操作:撤销单个会话: 允许用户撤销（登出）列表中的特定会话（除了当前会话）。这将使该会话的 session_id 失效或对应的JWT无效，并更新 user_ips.is_active_session = FALSE。撤销所有其他会话: 提供一个“登出所有其他设备”的按钮。邮件提醒: 当用户执行“撤销所有其他会话”操作时，可以发送一封确认邮件。API 密钥管理:用户可以为其账户生成多个API密钥。每个密钥可以有一个用户自定义的名称/标签。生成密钥时，实际密钥只显示一次，用户需自行保存。系统中只存储密钥的哈希值 (api_keys.api_key_hash)。用户可以查看其API密钥列表（名称、部分掩码的密钥前缀、创建时间、上次使用时间、过期时间）。用户可以删除（撤销）API密钥。水印设置:用户可以管理自己的水印（创建文本/图片水印，设置默认水印）。统计显示：在网站首页或页脚等显著位置，动态显示以下统计数据：“本站累计托管图片：XXX 张”（从 stats_counters 表读取或实时计算并缓存，此数字只增不减，需要持久化存储此计数）。“当前有效图片：YYY 张”（实时查询 images 表中 expires_at > NOW() 的记录数量，此数字会随图片上传和过期而动态变化，需要实时或定期更新）。全局公告区 (Global Announcement Area):显示位置: 在网站的显著位置（例如，首页顶部、所有页面的可关闭横幅/通知条）显示当前激活的公告。内容: 显示公告标题和内容。根据公告级别 (level) 使用不同颜色或图标提示（例如，信息、警告、紧急）。可见性: 根据 show_to_logged_in_users_only 和 show_to_admin_only 字段控制公告对不同用户的可见性。持久化: 公告内容和状态通过 announcements 数据表进行持久化存储。管理员管理: 管理员可在后台创建、编辑、激活/停用、删除公告。上传 API (Upload API):提供一个受保护的API端点 (e.g., /api/v1/upload)，允许通过API密钥进行图片上传。请求中需包含有效的API密钥。API上传也受用户上传限额、文件类型、大小等限制。API上传的图片默认使用用户的隐私和水印设置，或允许通过API参数覆盖。成功上传后，API响应中返回图片的公共URL和相关信息。信息、法律与政策页面：创建以下静态内容页面，内容需自行填充（提供占位符内容），但需提供页面框架和路由：FAQ (常见问题解答): (/faq)示例问题：图片存储多久？上传大小限制是多少（区分用户类型）？支持哪些文件类型？是否需要注册才能上传？如何重置密码？如果我的账户被锁定怎么办？如何更换邮箱地址？如何删除我的账户？账户删除流程是怎样的？账户被自动封禁了怎么办？如何启用和使用双因素认证 (2FA)？如何举报不当图片？什么是登录设备管理？如何使用API上传图片？图片隐私设置有哪些？如何使用水印功能？如何创建和管理图片收藏夹？Update Log (更新日志): (/updates 或 /changelog)示例条目格式：YYYY-MM-DD vX.Y.Z: 新增XXX功能。优化了YYY。修复了ZZZ问题。关于我们 (About Us): (/about-us)包含站点介绍、项目目标、团队信息（可选）或任何其他相关背景信息。用户协议 (Terms of Service): (/terms-of-service)，需包含用户行为规范、内容所有权、免责声明、账户删除条款、自动封禁条款、图片举报处理政策、API使用条款等。隐私政策 (Privacy Policy): (/privacy-policy)，需说明收集哪些数据（IP、邮箱、上传记录等）、如何使用、如何保护、Cookie使用情况、数据保留与删除政策等。Cookie 政策 (Cookie Policy): (/cookie-policy)，详细说明本站使用的Cookie类型、用途以及用户如何管理Cookie偏好。在页脚提供清晰的链接到以上所有页面。实现一个简单的 Cookie 同意横幅/弹窗，首次访问时显示，用户同意后不再显示（使用 cookie 记录用户偏好）。管理员联系方式：在页脚或专门的“关于我们”/“联系方式”页面清晰显示管理员联系方式：327527865@qq.com 或 QQ号 327527865。服务器错误处理与日志记录:日志记录:使用成熟的日志库（如 Winston 或 Pino）将详细错误信息记录到服务器上的指定文件（例如，logs/error.log）。日志条目应包含：时间戳、唯一的事件ID (Event ID)、错误消息、错误堆栈 (stack trace)、请求方法、请求URL、请求来源IP地址、用户ID（如果用户已登录）、以及经过脱敏处理的请求体（避免记录敏感信息如原始密码）。日志文件应具备轮转 (rotation) 和大小限制机制，防止单个日志文件过大。用户反馈:当发生服务器内部错误（HTTP 500系列错误）时，向用户展示一个通用的错误页面。此错误页面应显示一个唯一的事件ID，例如：“抱歉，服务器发生了一个意外错误。如果您需要帮助，请向管理员提供以下事件ID：{generated_event_id}”。事件ID应与日志中记录的ID一致，方便追踪。Artalk 评论组件集成:集成位置: 建议在单个图片的查看页面（例如 https://img.memory-echoes.cn/i/{unique_image_id}）下方集成 Artalk 评论组件，允许用户对特定图片进行评论。也可以考虑在“关于我们”或专门的“反馈”页面集成一个全局评论区。配置:Artalk 服务器地址: https://pinglun-img.memory-echoes.cn/在前端HTML中引入 Artalk 的 CSS 和 JS 文件（考虑使用子资源完整性 SRI）：<link href="https://pinglun-img.memory-echoes.cn/dist/Artalk.css" rel="stylesheet" integrity="sha384-...">
<script src="https://pinglun-img.memory-echoes.cn/dist/Artalk.js" integrity="sha384-..."></script>
初始化 Artalk 实例，确保 el 指向页面中用于承载评论组件的 <div> 元素。<div id="artalk-comments-area"></div>
<script>
  new Artalk({
    el: '#artalk-comments-area', // 确保这个元素存在于你的HTML中
    pageKey: '/i/' + '{{ unique_image_id_from_server }}', // 对于图片页面，必须是图片的唯一标识符 (例如数据库中的图片ID或S3对象键的唯一部分)
    pageTitle: '{{ image_title_or_filename_from_server }}', // 可以是图片名称或页面标题
    server: 'https://pinglun-img.memory-echoes.cn',
    site: 'Memory Echoes 图床评论区' // 您的站点名称
  });
</script>
动态 pageKey 和 pageTitle: 对于每个可评论的页面（尤其是图片详情页），pageKey 必须是唯一的，以确保评论与正确的页面关联。pageTitle 也应相应设置，从服务器端动态传递这些值到模板。风险控制 (风控) 与增强安全:登录尝试限制:单个账户连续登录失败次数达到阈值（例如 5 次）后，账户临时锁定（例如 30 分钟），users 表中 account_locked_until 记录解锁时间。期间该账户无法登录。邮件提醒: 账户因多次尝试登录失败而被锁定时，向用户邮箱发送通知。单个 IP 地址在短时间内（例如 15 分钟内）发起大量不同账户的登录失败尝试达到阈值（例如 20 次），该 IP 地址将被临时阻止访问登录接口一段时间（例如 1 小时），或强制要求进行更严格的人机验证和/或邮件OTP验证。可疑登录检测与强制邮件OTP验证 (IP核验):用户成功进行密码验证后（如果启用了2FA，则在2FA验证之后），系统检查登录IP和User-Agent。IP地址核验: 对比当前登录IP与 user_ips 表中该用户的历史IP记录。检测是否为全新IP、地理位置是否与历史活动区域突变（例如，短时间内从一个国家跳到另一个遥远的国家）、IP是否来自已知的代理或Tor出口节点、IP信誉分（如果集成第三方服务）。如果判定为高风险登录（新设备、异地登录、可疑IP），则强制进行邮件OTP验证。用户将被重定向到OTP输入页面，输入发送到其邮箱的验证码后才能完成登录。邮件提醒: 成功通过邮件OTP登录后，向用户邮箱发送“检测到在新设备或地点使用验证码登录”的安全提醒邮件，包含登录时间、IP地址和大致位置。多地址/设备同时登录检测与管理:在用户仪表盘提供“活动会话管理”或“最近登录设备”列表，显示最近登录的设备信息 (User-Agent)、IP地址、大致地理位置和登录时间。提供“登出所有其他设备”功能。实现方式：若使用JWT：需要维护一个与用户关联的 jwt_generation_salt 或类似字段，在执行“登出所有”时更改此salt，使得基于旧salt生成的JWT失效。新登录会使用新salt生成JWT。若使用服务器端Session：清除该用户除当前会话外的所有会话。邮件提醒: 当系统检测到用户账户在多个显著不同的地理位置或设备上同时活跃（基于 user_ips 表中短时间内多个不同 session_id 的活跃记录），可向用户发送安全警报：“您的账户似乎在多个地点同时登录，请检查您的活动会话并确保账户安全。”上传行为监控:对单个用户（已登录）或单个IP（匿名）的上传频率和总量进行监控。例如，每小时上传图片超过 N 张，或总大小超过 M MB，则触发警告或临时限制上传功能。邮件提醒 (管理员): 当检测到异常上传行为（如短时间大量上传、疑似滥用），向管理员邮箱发送警报。会话管理:用户修改密码、邮箱、启用/禁用2FA等敏感信息后，应使其其他设备上的旧会话失效。提供“登出所有设备”的功能。输入验证与过滤:除已有文件上传验证外，对所有用户输入（如评论、个人信息修改、图片举报备注等）进行严格的服务端验证和XSS过滤。危险操作的邮件验证:明确要求所有“危险操作”（如修改密码、修改邮箱、请求删除账户、禁用2FA等）必须通过向用户当前已验证的邮箱发送验证码/验证链接来进行二次确认。自动封禁系统:触发条件 (示例，需可配置):短时间内多次（例如 >3 次）触发高风险登录并验证OTP失败。账户在锁定状态下仍有大量登录尝试。上传内容多次被确认为恶意或严重违规（可能需要与手动举报/审核系统结合，此处简化为基于某些自动检测模式）。检测到使用自动化工具进行恶意操作（如批量注册、密码枚举等）。多次提交虚假或滥用图片举报。操作: 设置 auto_banned_at 为当前时间，记录 auto_ban_reason。邮件提醒 (用户): 通知用户账户已被系统自动暂停，说明原因，并告知可通过邮件申请解封或联系管理员。用户申请邮件解封:用户在登录页面的自动封禁提示中点击“申请邮件解封”。系统生成 unban_request_token 并发送包含解封链接 (https://img.memory-echoes.cn/request-unban?token={unban_request_token}) 或验证码的邮件到用户邮箱。用户点击链接或输入验证码。系统验证通过后，清除 auto_banned_at, auto_ban_reason, 及相关解封令牌。is_banned 状态不变（如果之前被管理员手动封禁）。邮件提醒 (用户): “您的账户自动暂停状态已解除。如果账户仍无法登录，请检查是否有其他封禁或联系管理员。”邮件提醒 (管理员): 通知管理员某用户已通过邮件自行解除了自动封禁。管理员功能 (通过受保护的、功能齐全且美观的Web界面实现):仪表盘: 显示关键系统统计数据（用户总数、活跃用户、图片总数、存储使用情况、待处理事项如待审核图片举报数量、解封请求等）。用户管理:查看用户列表: 显示用户ID、邮箱、角色、注册时间、最后登录时间、是否验证、是否被手动封禁、是否被自动封禁。支持分页、搜索（按邮箱/ID）、筛选（按角色/状态）。查看用户详情: 包括IP历史、活动会话、上传记录、账户操作历史（来自audit_logs）、2FA状态、图片收藏夹列表。账户手动封禁 (Ban) 与解禁 (Unban): 管理员可以根据用户邮箱或ID查找用户，设置 is_banned = TRUE，并填写 ban_reason 和 banned_at。解禁则清除这些字段。网页提示 (管理员): 操作成功。邮件提醒 (用户): 发送邮件通知用户其账户已被暂停/解除暂停，并说明原因。用户组/角色管理:管理员（admin 或 super_admin）可以修改用户的 role 字段 (例如，将普通用户提升为 admin，或将 admin 降级为 user)。super_admin 角色拥有最高权限，可以管理其他 admin 账户。普通 admin 不能修改其他 admin 或 super_admin 的角色。重置用户2FA (仅限 super_admin): 为丢失设备和恢复码的用户禁用2FA。管理员账户管理 (仅限 super_admin):添加新的管理员账户（本质是创建一个新用户并设置其角色为 admin，或提升现有用户）。移除管理员权限（将 admin 角色降为 user）。系统日志与审计:查看审计日志 (audit_logs):提供界面按日期范围（例如，今日、昨日、近7天、近30天、自定义范围）查看日志。支持按 action_type, actor_user_id, target_user_id 等字段进行筛选和搜索。实现“每日日志”和“近一年每日日志”的快速访问或报告生成功能，并以图表或清晰列表形式展示。查看系统错误日志 (来自Winston/Pino的错误文件，提供界面查看或下载)。图片举报管理:查看待处理举报列表 (image_reports 中 status = 'pending_review'): 显示举报ID、被举报图片缩略图/链接、举报人（如果非匿名）、举报原因、举报时间。处理举报: 管理员可以查看举报详情和被举报图片。操作选项: 忽略举报 (resolved_no_action)、删除图片 (resolved_image_deleted - 同时从S3和数据库删除图片)、警告用户 (resolved_user_warned - 可能需要发送邮件)、封禁用户 (resolved_user_banned - 触发用户封禁流程)。更新 image_reports 表中的 status, reviewed_by_admin_id, reviewed_at。所有处理操作记录到 audit_logs。公告管理 (Announcement Management):创建/编辑公告: 提供富文本编辑器或Markdown编辑器创建和修改公告内容 (title, content, level, is_active, show_to_logged_in_users_only, show_to_admin_only)。查看公告列表: 显示所有公告及其状态（激活/非激活）。激活/停用公告。删除公告。邮件提醒 (可选): 发布重要公告时，可选择向所有已验证用户发送邮件通知。水印管理 (Watermark Management):管理员可以创建、编辑、删除全局水印 (watermarks 表中 is_global = TRUE)。用户可以在其设置中选择使用这些全局水印，或创建自己的私有水印。系统配置管理 (推荐): 界面化管理关键系统配置项（如自动封禁阈值、邮件模板、上传限制、2FA强制策略、默认图片隐私级别、全局水印、图片优化设置等）。内容管理: 管理员可以查看、搜索和删除用户上传的图片（例如，处理违规内容举报或存储清理）。技术栈与要求：后端： Node.js (使用 Express.js 框架)。前端： HTML5, CSS3, JavaScript (ES6+)。所有前端页面（包括HTML结构、CSS样式、客户端JavaScript逻辑）均需完整提供，并确保美观和功能完整性。模板引擎： 如 EJS, Pug, Handlebars 等。数据库ORM/查询构建器: 如 Sequelize, TypeORM, Knex.js。邮件发送库: 如 Nodemailer。日志库: 如 Winston 或 Pino。任务调度库 (用于S3清理、账户删除等): 如 node-cron。2FA库 (TOTP): 如 speakeasy (用于生成和验证TOTP)。二维码生成库: 如 qrcode (用于显示2FA设置的QR码)。图片处理库 (用于水印和优化): 如 sharp。IP地理位置库 (可选，用于增强登录检测): 如 geoip-lite。IP信誉检查库/服务 (可选，高级功能): 集成如 Spamhaus, AbuseIPDB 等服务API，用于IP核验和自动封禁决策。依赖管理： npm 或 yarn。确保包含处理日期时间、IP地理位置查询（可选）的库。设计与用户体验 (UX)：蔚蓝档案风格与现代化设计：配色方案： 严格参考“蔚蓝档案”的UI主色调（例如：主体使用明亮的蓝色 #007bff 或游戏内特定蓝色、辅以白色 #FFFFFF、浅灰色 #F0F2F5，点缀少量高饱和度的强调色如黄色或粉色）。字体： 选择清晰、现代的无衬线字体（如 Inter, Roboto, Noto Sans SC）。如果能找到并合法使用与“蔚蓝档案”游戏内相似的Web字体（需确保字体授权并优化加载），则更佳。界面元素与细节： 按钮、输入框、卡片、模态框/提示框、表单、用户仪表盘元素、管理员后台的表格、图表、导航、2FA设置界面、图片举报表单、公告管理界面、邮件OTP验证界面、登录设备管理界面、水印设置界面、收藏夹管理界面等均需符合风格，简洁、扁平化或带有轻微圆角（4-8px），可适度加入符合游戏风格的微妙渐变、内部阴影或描边。注重交互细节和微动画，提升用户体验。动画效果： 在适当的地方使用流畅、不突兀的CSS过渡和动画效果，例如按钮悬停、模态框弹出、加载状态、元素显隐等，以增强界面的生动性和现代感。图标： 使用风格统一、清晰的SVG图标库（如 Feather Icons, Tabler Icons，或自定义符合蔚蓝档案风格的SVG图标）。布局： 严格实现响应式设计，确保全站（包括用户端和功能齐全的管理员后台）在桌面和移动设备上均有优秀的视觉和交互体验。禁止出现横向滚动条。加载指示： 在图片上传、数据提交、页面加载等耗时操作中，提供明确的进度条或加载动画。易用性：**所有用户界面（包括普通用户和管理员）**均需简洁直观，操作流程清晰明了，减少用户思考负担。提供即时、有效的操作反馈。包括账户被封禁时的明确网页提示。在主页显著位置提示“注册并验证邮箱，即可享受128MB单文件上传特权！”确保所有新邮件提醒和安全提示界面风格统一，并与整体“蔚蓝档案”风格保持一致。安全性与性能：漏洞警告与安全提示页面:在“用户协议”或专门的“安全须知”页面中包含明确的警告和提示，内容包括：严禁上传非法/侵权/有害内容；图片公开访问的风险，勿上传隐私敏感信息；用户对上传内容负责，平台免责并配合调查；图片72小时后自动删除，用户需自行备份；系统记录IP等信息用于安全目的。输入验证:对所有用户输入（包括URL参数、表单字段、请求体等）进行严格的服务端验证。强调密码策略的执行（最小长度、复杂度要求）。文件上传：严格校验MIME类型和文件扩展名（后端），内容嗅探（如果可行），文件大小限制（区分用户类型）。Cloudflare Turnstile token 后端验证。所有用户输入的严格验证，防止注入类攻击。文件处理与S3对象键:为S3中的对象生成唯一的、抗冲突的、不易被猜测的对象键名（例如，使用 uuid v4 结合原始文件扩展名，或SHA256哈希值）。避免直接使用用户上传的文件名作为S3对象键。如果在上传到S3前需要在本地临时存储，确保使用安全的临时文件处理机制，并在操作完成后立即清理。错误处理与日志安全:向用户提供清晰、友好的错误提示及事件ID，避免暴露敏感的系统内部错误信息。后端记录详细的错误日志，但确保日志中不直接记录原始密码、API密钥、完整的会话令牌、2FA密钥等极度敏感信息；对用户输入数据进行必要的脱敏处理后再记录到日志中。保护日志文件，设置合适的访问权限，防止未授权访问。速率限制：对关键API端点（如注册、登录尝试、图片上传、密码重置请求、邮箱更换请求、账户删除确认请求、邮件OTP请求、2FA验证尝试、图片举报提交、API密钥使用、管理员登录和操作API）实施速率限制，以防止暴力破解、DoS攻击和滥用。可以使用如 express-rate-limit 中间件。依赖库安全：使用所有依赖库的最新稳定版本。定期使用 npm audit 或类似工具检查并修复已知的安全漏洞。数据清理机制的可靠性：详细描述并确保72小时自动删除机制（针对图片和已确认删除的账户数据）能够可靠运行。无论是S3生命周期规则还是应用层定时任务（如 node-cron），都需要有验证其有效性的方法并在 README.md 中说明。HTTPS：所有生成的URL（包括邮件中的验证链接）应基于 https://img.memory-echoes.cn。最终部署时，必须将服务部署在HTTPS环境下。如果使用Cloudflare，可以利用其提供的免费HTTPS服务。Web安全实践：防止XSS攻击： 对所有用户生成并在前端展示的内容进行适当的上下文输出转义（例如，使用模板引擎的内置转义功能，或专门的库如 he）。公告内容在展示前也必须进行严格的XSS过滤。 Artalk组件自身也应有XSS防护。防止CSRF攻击： 如果使用基于Cookie的会话管理，对所有状态变更的请求（POST, PUT, DELETE等）使用CSRF令牌（如 csurf 中间件）。确保管理员后台所有表单提交也受CSRF保护。设置合适的HTTP安全头部: 例如 X-Content-Type-Options: nosniff, X-Frame-Options: DENY (或 SAMEORIGIN), Content-Security-Policy (CSP - 提供一个相对严格且全面的CSP策略，例如 default-src 'self'; script-src 'self' https://img.memory-echoes.cn https://pinglun-img.memory-echoes.cn https://challenges.cloudflare.com 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://pinglun-img.memory-echoes.cn; img-src 'self' data: https:; font-src 'self' data:; frame-src https://challenges.cloudflare.com; connect-src 'self' https://pinglun-img.memory-echoes.cn;), Referrer-Policy: strict-origin-when-cross-origin, Strict-Transport-Security (HSTS - 部署HTTPS后启用)。注意：CSP中的 unsafe-inline 应尽可能避免，如果某些库确实需要，应评估风险或寻找替代方案。子资源完整性 (SRI): 对于从CDN加载的第三方JavaScript和CSS文件（如Artalk），应尽可能使用SRI哈希值来确保其未被篡改。风险控制措施的实现: 确保上述第12点的风控逻辑在后端得到妥善实现和测试。管理员权限控制:严格区分 admin 和 super_admin 的权限。所有管理员操作必须记录到 audit_logs。考虑为管理员操作也引入二次验证（例如，执行敏感操作如修改其他管理员权限或全局配置时，或从非常用IP登录管理员后台时）。密码安全:推荐集成密码泄露检查服务 (如 Have I Been Pwned API) 在用户注册或修改密码时，提醒用户密码是否已在公开泄露事件中出现。API密钥安全:API密钥在生成时只显示一次。数据库中只存储API密钥的哈希值。建议API密钥具有可配置的过期时间。记录API密钥的使用情况（上次使用时间、来源IP等）。代码结构与注释：提供组织良好、结构清晰、模块化的代码（例如，按功能划分目录：routes/, controllers/, services/ (业务逻辑), middlewares/ (包括全局错误处理中间件、认证中间件、管理员权限校验中间件), models/ (数据库模型，如果使用ORM), views/ (模板文件，区分用户视图和管理员视图), public/ (存放CSS, 客户端JS, 静态图片等), admin/ (存放管理员后台相关的前后端代码，如果与用户端分离), config/ (配置文件), utils/ (工具函数), logs/ (此目录应添加到 .gitignore))。为所有关键函数、类、模块以及复杂的业务逻辑块添加详尽的中文注释，解释其功能、参数、返回值和重要逻辑。包含一个全面的 README.md 文件，内容至少包括：项目简介和功能列表。详细的环境变量配置说明（提供 .env.example 文件）： 包括S3凭证、Turnstile密钥、MySQL连接信息、邮箱SMTP配置、JWT密钥（如果使用）、服务端口 (DEFAULT_PORT=1190)、应用基础URL (APP_URL=https://img.memory-echoes.cn)、日志文件路径及级别配置、密码重置/邮箱更换/登录OTP/账户删除确认/2FA的令牌有效期配置、账户锁定阈值和时间配置、账户删除冷静期时长、默认超级管理员账户的创建方式和初始凭证（强调首次启动后应修改）、自动封禁系统的触发条件和解封流程、管理员后台功能说明（包括用户组管理、管理员添加、日志查看、图片举报管理、公告管理、水印管理）、审计日志表 (audit_logs) 的结构和用途等。本地开发环境搭建步骤（Node.js版本要求、MySQL安装与数据库创建脚本（或ORM迁移命令）、依赖安装命令 npm install 或 yarn install）。数据库迁移/同步说明（如果使用ORM，提供迁移命令）。项目启动命令 (npm start 或 yarn start，以及开发模式启动命令如 npm run dev)。图片自动删除机制的配置和验证方法。账户自动删除机制（冷静期后）的配置和验证方法。错误日志查看方法和事件ID说明。Artalk 集成说明和前端配置要点。FAQ、更新日志等静态页面的内容管理方式（例如，直接在模板中硬编码，或从简单的配置文件/Markdown文件读取）。API文档（针对用户上传API）。主要API端点说明（如果适用，例如提供给潜在的第三方客户端）。Docker Compose 构建与运行说明。确保新功能模块化，易于维护和扩展。代码交付的完整性与质量要求 (Code Delivery Completeness and Quality Requirements):所有源代码的完整性: 项目必须包含所有后端逻辑文件 (.js), 完整的前端用户界面和管理员后台界面的HTML模板, 所有相关的CSS样式文件, 以及所有客户端JavaScript文件。功能完整且可运行: 交付的代码必须是一个功能完整、可独立编译/构建和运行的应用程序。所有描述的核心功能、用户流程、管理员功能和安全措施都应得到实现。无核心逻辑占位符: 核心业务逻辑、关键功能模块（如用户认证、图片上传、S3交互、数据库操作、邮件发送、安全校验、管理员操作等）不应使用 // TODO 或类似的占位符，必须是已实现的、可工作的代码。前端实现标准: 所有前端页面不仅需要HTML结构，还必须包含完整的、符合“蔚蓝档案”设计风格的CSS样式，以及实现所有前端交互逻辑的客户端JavaScript。界面应美观、响应式且功能齐全，包含丰富的细节和流畅的动画效果。遵循代码结构: 代码应遵循“代码结构与注释”部分建议的模块化结构。包含所有辅助文件: 除源代码外，还必须提供所有必要的辅助文件，如 package.json, lock files, .env.example, Dockerfile, docker-compose.yml, .dockerignore, 数据库初始化/迁移脚本, 以及详细的 README.md。代码更新的完整性: 任何后续的代码更新或修改，都必须以完整项目的形式提供，确保所有文件都是最新的，并且项目整体保持可运行状态。不应只提供片段或部分更改。分批交付文件数量: 由于本项目功能复杂且代码量较大，代码将分批次生成和交付。在每一次代码交付时，所包含的主要应用逻辑相关文件数量（不包括如 .env.example, Dockerfile, docker-compose.yml, README.md, package.json 等必要的配置文件和文档）应优先考虑交付一个或多个逻辑上完整且可独立测试的功能模块或子模块。 如果一个功能模块自然地包含较多文件，应优先保证其完整性。密钥/令牌的预配置: 在生成的代码或示例配置文件 (如 .env.example 或直接在 docker-compose.yml 的环境变量部分) 中，必须明确使用用户提供的 S3 API 密钥 (Access Key: PtEfTT0LtNiVPgBh, Secret Key: qwzQl9XvjQGbdCjKLQJYpOVwAZMjqM) 和 Cloudflare Turnstile 令牌 (Site Key: 0x4AAAAAABc8GGu7mmyWjrkV, Secret Key: 0x4AAAAAABc8GNH2e8EYjXXxb0bB0vKIMbs) 进行预配置占位或示例。代码生成与交互流程 (Code Generation and Interaction Flow):自主推进任务内容: 我 (AI) 将根据本提示词的整体任务目标，自行判断并决定下一个合乎逻辑的开发步骤或功能模块。我不会询问您对下一步具体开发内容的意见。分块交付、暂停与确认: 由于项目较大，代码将分批次生成。在每一次代码交付一个逻辑上相对完整且可测试的功能模块或子模块后，我会明确告知您该部分已完成，简要解释本次交付的代码实现了哪些功能，并说明我接下来计划做什么。然后，我会暂停生成，等待您回复“继续”（或类似确认指令）后，才会继续生成下一批代码或进行下一步骤。最终目标: 我的最终目标是根据本提示词 (当前为 v23 版本或后续更新版本)，通过多次分块交付，完整地完成整个项目的开发任务。部署 (Deployment):Docker Compose:提供一个 docker-compose.yml 文件用于编排 Node.js 应用服务和 MySQL 数据库服务。Node.js 应用服务 (app):build: . (或指向包含 Dockerfile 的上下文路径)ports: - "1190:1190"environment: (通过 .env 文件或直接在 docker-compose.yml 中定义环境变量，如数据库连接信息、S3_ACCESS_KEY_ID=PtEfTT0LtNiVPgBh, S3_SECRET_ACCESS_KEY=qwzQl9XvjQGbdCjKLQJYpOVwAZMjqM, CLOUDFLARE_TURNSTILE_SITE_KEY=0x4AAAAAABc8GGu7mmyWjrkV, CLOUDFLARE_TURNSTILE_SECRET_KEY=0x4AAAAAABc8GNH2e8EYjXXxb0bB0vKIMbs 等，注意生产环境中敏感信息应通过更安全的方式管理，如 Docker Secrets 或外部配置服务)。depends_on: - mysql_db (确保数据库服务先启动)volumes: (例如，挂载日志目录 ./logs:/usr/src/app/logs)restart: unless-stoppedMySQL 服务 (mysql_db):image: mysql:8.0 (或与您版本兼容的特定版本)environment:MYSQL_ROOT_PASSWORD=mysql_26KCF4 (使用您提供的密码)MYSQL_DATABASE=img-72hoursMYSQL_USER=img-72hoursMYSQL_PASSWORD=7haMSr3aDTTDcWY4volumes:./mysql-data:/var/lib/mysql (持久化数据库数据)./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql (可选，用于首次启动时初始化数据库表结构和默认管理员)ports: - "3307:3306" (可选，如果需要在宿主机直接访问数据库，端口映射到3307避免与宿主机MySQL冲突)restart: unless-stoppedDockerfile (./Dockerfile):请提供一个 Dockerfile 用于构建 Node.js 应用镜像。基础镜像: 建议使用官方的 Node.js LTS Alpine 镜像 (例如 node:20-alpine 或最新的 LTS Alpine 版本) 以减小镜像体积。Dockerfile 指令应包括:FROM node:<version>-alpineWORKDIR /usr/src/app设置 NODE_ENV=production 环境变量。设置 PORT=1190 环境变量 (或确保应用从 .env 文件读取)。复制 package.json 和 package-lock.json (或 yarn.lock)。运行 npm ci --only=production (或 yarn install --production --frozen-lockfile)。复制应用程序的其余源代码和公共静态资源。EXPOSE 1190。定义 CMD (例如 CMD ["node", "server.js"] 或 CMD ["npm", "start"])。.dockerignore 文件:提供一个 .dockerignore 文件。Nginx 配置: 明确说明本项目不提供 Nginx 配置文件，用户需自行配置反向代理、HTTPS终止等。排除项：无需考虑 CDN 集成。无需考虑复杂的负载均衡策略（单实例部署即可）。最终交付物：一个完整的、可运行的 Node.js (Express.js) 项目，严格遵循“代码交付的完整性与质量要求”，包含所有必要的源代码文件（包括所有后端 .js 文件，前端用户界面和管理员后台界面的完整HTML模板、CSS样式文件和客户端JavaScript文件，均需包含丰富的细节和流畅的动画）、配置文件（如 .env.example，其中包含S3和Cloudflare密钥的占位符或示例值）、数据库初始化脚本（或ORM迁移文件，包括默认管理员账户的创建逻辑、audit_logs 表、announcements 表、api_keys 表、watermarks 表和 collections 表）、package.json、package-lock.json (或 yarn.lock)、Dockerfile、docker-compose.yml、.dockerignore，以及上述要求的 README.md 文件。请确保生成的代码尽可能地贴近上述所有要求，并能够实际运行。重点关注安全性（特别是新增的密码重置、邮箱更换、账户删除、管理员操作、自动封禁和风控功能，包括邮件OTP和2FA）、用户认证流程的完整性、MySQL的正确使用、邮件发送功能、错误处理与日志记录机制、Artalk评论组件的正确集成、蔚蓝档案设计风格在所有用户界面和功能齐全的管理员后台界面的统一应用（包含丰富的细节和流畅的动画）、各项核心功能的稳定实现以及 Docker Compose 化部署的完整性。
